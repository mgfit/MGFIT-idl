/* Index used for searching */
/*
   Fields used:
     url, name, type, filename, authors, routine name, comments, parameters,
     categories, and attributes
*/
title = "API Documentation for MGFIT-idl";
subtitle = "IDL Library for Least-Squares Minimization Genetic Algorithm Fitting";
libdata = new Array();
libdataItem = 0;



libdata[libdataItem++] = new Array("./mgfit_contin.html", "mgfit_contin.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "mgfit_contin.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./mgfit_contin.html#mgfit_contin", "mgfit_contin", 'routine in <a href="./mgfit_contin.html">mgfit_contin.pro</a>', "mgfit_contin.pro", "   Ashkbiz Danehkar   ", "mgfit_contin", "     This function extracts the continuum from the spectrum.   ", "spectrumdata                         the arrays of structures {wavelength: 0.0, flux:0.0, residual:0.0}   ", "Continuum", "   0.1.0        20/07/2014, A. Danehkar, Translated to IDL from FORTRAN                               in ALFA by R. Wessson.       15/01/2017, A. Danehkar, A few bugs fixed     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> spectrumdata=mgfit_init_spec(wavel, flux) <span class= code-prompt >IDL&gt;</span> continuum=mgfit_contin(spectrumdata)      type=arrays of structures. This function returns          the arrays of structures {wavelength: 0.0, flux:0.0, residual:0.0}.   ");
  
  

libdata[libdataItem++] = new Array("./mgfit_emis.html", "mgfit_emis.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "mgfit_emis.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./mgfit_emis.html#mgfit_emis", "mgfit_emis", 'routine in <a href="./mgfit_emis.html">mgfit_emis.pro</a>', "mgfit_emis.pro", "   Ashkbiz Danehkar   ", "mgfit_emis", "     This function fits multiple Gaussian functions to a list of emission lines using      a least-squares minimization technique and a genetic-type random walk      method. It uses the MPFIT idl library to initialize the parameters of      the run in the first iteration. The continuum curve is determined      using mgfit_contin() and subtracted before the line identification      and flux measurements. It uses mgfit_emis_err() to estimate the      uncertainties itroduced by the best-fit model residuals and      the white noise.   ", "line_array_size                              size of the line array   no_blueshiftprintimage                              Set to produce plots   imagename                              The file name for plots if printimage sets   specdata                              the observed spectrum stored in                               the arrays of structures {wavelength: 0.0, flux:0.0, residual:0.0}   redshift_initial                              the initial/guess redshift   resolution_initial emissionlines                              the specified emission lines stored in                               the arrays of structures                               { wavelength: 0.0,                                 peak:0.0,                                 sigma1:0.0,                                 flux:0.0,                                 continuum:0.0,                                 uncertainty:0.0,                                 redshift:0.0,                                 resolution:0.0,                                 blended:0,                                 Ion:'',                                 Multiplet:'',                                 LowerTerm:'',                                 UpperTerm:'',                                 g1:'',                                 g2:''}   redshift_tolerance1resolution_tolerance1resolution_minresolution_maxgenerations                               the maximum generation number in the genetic algorithm   popsize                               the population size in each generation in the genetic algorithm   pressure                               the value of the selective pressure in the genetic algorithm   ", "Emission", "   0.1.0        20/07/2014, A. Danehkar, Adopted from Algorithm used                               in the FORTRAN program ALFA by R. Wessson       22/07/2015, A. Danehkar, Several performance optimized.       12/11/2015, A. Danehkar, Degree and variance added to chi_squared.       15/02/2016, A. Danehkar, Continuum subtracted before fitting.       22/02/2016, A. Danehkar, Uncertainties estimation added.       15/10/2016, A. Danehkar, Fixed small bugs.       22/11/2017, A. Danehkar, New parameters added, other modifications.     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> fitstronglines = mgfit_emis(stronglines, redshift_initial, resolution_initial, $ <span class= code-prompt >IDL&gt;</span>                            emissionlines, redshift_tolerance1, resolution_tolerance1, $ <span class= code-prompt >IDL&gt;</span>                            generations, popsize, pressure, line_array_size=linelocation0_step)      type=arrays of structures. This function returns the arrays of structures                               { wavelength: 0.0, peak:0.0, sigma1:0.0, flux:0.0,                                 uncertainty:0.0, redshift:0.0, resolution:0.0,                                 blended:0, Ion:'', Multiplet:'',                                 LowerTerm:'', UpperTerm:'', g1:'', g2:''}   ");
  
  

libdata[libdataItem++] = new Array("./mgfit_emis_err.html", "mgfit_emis_err.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "mgfit_emis_err.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./mgfit_emis_err.html#mgfit_emis_err", "mgfit_emis_err", 'routine in <a href="./mgfit_emis_err.html">mgfit_emis_err.pro</a>', "mgfit_emis_err.pro", "   Ashkbiz Danehkar   ", "mgfit_emis_err", "     This function estimates the uncertainties introduced by the best-fit      model residuals and the white noise quantified using the signal-dependent      noise model of least-squares Gaussian fitting (Lenz & Ayres 1992;      1992PASP..104.1104L) based on on the work of Landman, Roussel-Dupre,      and Tanigawa (1982; 1982ApJ...261..732L).   ", "syntheticspec                         the synthetic spectrum made by mgfit_synth_spec()                          stored in the arrays of structures {wavelength: 0.0, flux:0.0, residual:0.0}   spectrumdata                         the observed spectrum stored in the arrays                          of structures {wavelength: 0.0, flux:0.0, residual:0.0}   emissionlines                         the emission lines specified for error estimation                          stored in the arrays of structures                          { wavelength: 0.0,                            peak:0.0,                            sigma1:0.0,                            flux:0.0,                            uncertainty:0.0,                            redshift:0.0,                            resolution:0.0,                            blended:0,                            Ion:'',                            Multiplet:'',                            LowerTerm:'',                            UpperTerm:'',                            g1:'',                            g2:''}   redshift", "Emission Uncertainty", "   0.1.0        20/07/2014, A. Danehkar, Adopted from Algorithm used                               in the FORTRAN program ALFA by R. Wessson       12/04/2015, A. Danehkar, Performance optimized for IDL.       20/08/2016, A. Danehkar, Added better performance in noise estimation.       22/10/2016, A. Danehkar,  Fixed small bugs.       22/02/2016, A. Danehkar, Uncertainties estimation added.       15/10/2016, A. Danehkar, Fixed small bugs.       21/06/2017, A. Danehkar, Some modifications.     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> emissionlines_section=mgfit_emis_err(syntheticspec_section, spec_section, emissionlines_section)      type=arrays of structures. This function returns the arrays of structures                               { wavelength: 0.0, peak:0.0, sigma1:0.0, flux:0.0,                                 uncertainty:0.0, redshift:0.0, resolution:0.0,                                 blended:0, Ion:'', Multiplet:'',                                 LowerTerm:'', UpperTerm:'', g1:'', g2:''}   ");
  
  

libdata[libdataItem++] = new Array("./mgfit_fltr_emis.html", "mgfit_fltr_emis.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "mgfit_fltr_emis.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./mgfit_fltr_emis.html#mgfit_fltr_emis", "mgfit_fltr_emis", 'routine in <a href="./mgfit_fltr_emis.html">mgfit_fltr_emis.pro</a>', "mgfit_fltr_emis.pro", "   Ashkbiz Danehkar   ", "mgfit_fltr_emis", "     This function filters the emission line lists from the list of      emission lines within the specified wavelength range.   ", "emissionlines                         the emission lines given for the selection                          stored in the arrays of structures                          { wavelength: 0.0,                            peak:0.0,                            sigma1:0.0,                            flux:0.0,                            uncertainty:0.0,                            redshift:0.0,                            resolution:0.0,                            blended:0,                            Ion:'',                            Multiplet:'',                            LowerTerm:'',                            UpperTerm:'',                            g1:'',                            g2:''}   wavel_min                           the minimum wavelength   wavel_max                           the maximum wavelength   ", "Emission Filter", "   0.1.0        20/07/2014, A. Danehkar,  IDL code written.     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span>  emissionlines_section=mgfit_fltr_emis(emissionlines, wavel_min, wavel_max)       type=arrays of structures. This function returns the lits of                                 selected emission lines in the arrays of structures                                 { wavelength: 0.0, peak:0.0, sigma1:0.0, flux:0.0,                                   uncertainty:0.0, redshift:0.0, resolution:0.0,                                   blended:0, Ion:'', Multiplet:'',                                   LowerTerm:'', UpperTerm:'', g1:'', g2:''}   ");
  
  

libdata[libdataItem++] = new Array("./mgfit_init_emis.html", "mgfit_init_emis.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "mgfit_init_emis.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./mgfit_init_emis.html#mgfit_init_emis", "mgfit_init_emis", 'routine in <a href="./mgfit_init_emis.html">mgfit_init_emis.pro</a>', "mgfit_init_emis.pro", "   Ashkbiz Danehkar   ", "mgfit_init_emis", "     This function initializes the emission line list with the specified      wavelength array and flux array.   ", "wavel                   the wavelength array   flux                   the flux array   ", "Emission Initialization", "   0.1.0        20/07/2014, A. Danehkar,  IDL code written.     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> emissionlines=mgfit_init_emis(wavel, flux)       type=arrays of structures. This function returns the emission line list                                stored in the arrays of structures                                { wavelength: 0.0, peak:0.0, sigma1:0.0, flux:0.0,                                  uncertainty:0.0, redshift:0.0, resolution:0.0,                                  blended:0, Ion:'', Multiplet:'',                                  LowerTerm:'', UpperTerm:'', g1:'', g2:''}   ");
  
  

libdata[libdataItem++] = new Array("./mgfit_init_fltr_emis.html", "mgfit_init_fltr_emis.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "mgfit_init_fltr_emis.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./mgfit_init_fltr_emis.html#mgfit_init_fltr_emis", "mgfit_init_fltr_emis", 'routine in <a href="./mgfit_init_fltr_emis.html">mgfit_init_fltr_emis.pro</a>', "mgfit_init_fltr_emis.pro", "   Ashkbiz Danehkar   ", "mgfit_init_fltr_emis", "     This function initializes and filters the emission line lists      from the list of emission lines within the specified wavelength range   ", "emissionlines                         the emission lines given for the selection                          stored in the arrays of structures                          { wavelength: 0.0,                            peak:0.0,                            sigma1:0.0,                            flux:0.0,                            continuum:0.0,                            uncertainty:0.0,                            redshift:0.0,                            resolution:0.0,                            blended:0,                            Ion:'',                            Multiplet:'',                            LowerTerm:'',                            UpperTerm:'',                            g1:'',                            g2:''}   wavel_min                           the minimum wavelength   wavel_max                           the maximum wavelength   redshift", "Emission Initialization", "   0.1.0        20/07/2014, A. Danehkar, IDL code written.       15/01/2017, A. Danehkar, A few bugs fixed     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> emissionlines=mgfit_init_fltr_emis(strongline_data, wavel_min, wavel_max)       type=arrays of structures. This function returns the lits of                                 selected emission lines in the arrays of structures                                 { wavelength: 0.0, peak:0.0, sigma1:0.0, flux:0.0,                                   continuum:0.0, uncertainty:0.0, redshift:0.0,                                   resolution:0.0, blended:0, Ion:'', Multiplet:'',                                   LowerTerm:'', UpperTerm:'', g1:'', g2:''}   ");
  
  

libdata[libdataItem++] = new Array("./mgfit_init_seed.html", "mgfit_init_seed.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "mgfit_init_seed.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./mgfit_init_seed.html#mgfit_init_seed", "mgfit_init_seed", 'routine in <a href="./mgfit_init_seed.html">mgfit_init_seed.pro</a>', "mgfit_init_seed.pro", "   Ashkbiz Danehkar   ", "mgfit_init_seed", "     This function initializes the random seed based on the system clock   ", "", "Genetic Algorithm Initialization", "   0.1.0        20/07/2014, A. Danehkar, Translated to IDL from FORTRAN                               in ALFA by R. Wessson     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> ret=mgfit_init_seed()       type=arrays. This function returns 20 random numbers.   ");
  
  

libdata[libdataItem++] = new Array("./mgfit_init_spec.html", "mgfit_init_spec.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "mgfit_init_spec.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./mgfit_init_spec.html#mgfit_init_spec", "mgfit_init_spec", 'routine in <a href="./mgfit_init_spec.html">mgfit_init_spec.pro</a>', "mgfit_init_spec.pro", "   Ashkbiz Danehkar   ", "mgfit_init_spec", "     This function creates the spectrum from the wavelength      array and flux array.   ", "wavel                   the wavelength array   flux                   the flux array   ", "Spectrum Initialization", "   0.1.0        20/07/2014, A. Danehkar,  IDL code written.     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> spectrumdata=mgfit_init_spec(wavel, flux)       type=arrays of structures. This function returns the spectrum                                in the arrays of structures                                {wavelength: 0.0, flux:0.0, residual:0.0}   ");
  
  

libdata[libdataItem++] = new Array("./mgfit_mutation1.html", "mgfit_mutation1.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "mgfit_mutation1.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./mgfit_mutation1.html#mgfit_mutation1", "mgfit_mutation1", 'routine in <a href="./mgfit_mutation1.html">mgfit_mutation1.pro</a>', "mgfit_mutation1.pro", "   Ashkbiz Danehkar   ", "mgfit_mutation1", "     This function is for the genetic algorithm mutation type-1   ", "", "Genetic Algorithm", "   0.1.0        20/07/2014, A. Danehkar, Translated to IDL from FORTRAN                  in ALFA by R. Wessson     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> value=mgfit_mutation1()       type=arrays. This function mutation rate.   ");
  
  

libdata[libdataItem++] = new Array("./mgfit_synth_spec.html", "mgfit_synth_spec.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "mgfit_synth_spec.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./mgfit_synth_spec.html#mgfit_synth_spec", "mgfit_synth_spec", 'routine in <a href="./mgfit_synth_spec.html">mgfit_synth_spec.pro</a>', "mgfit_synth_spec.pro", "   Ashkbiz Danehkar   ", "mgfit_synth_spec", "     This function makes a spectrum from given lines.   ", "continuumlines                   the line list stored in                    the arrays of structures                    { wavelength: 0.0,                      peak:0.0,                      sigma1:0.0,                      flux:0.0,                      continuum:0.0,                      uncertainty:0.0,                      redshift:0.0,                      resolution:0.0,                      blended:0,                      Ion:'',                      Multiplet:'',                      LowerTerm:'',                      UpperTerm:'',                      g1:'',                      g2:''}   spec", "Spectrum", "   0.1.0        20/07/2014, A. Danehkar, Translated to IDL from FORTRAN                  in ALFA by R. Wessson.       22/11/2017, A. Danehkar, A few changes.     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> syntheticspec=mgfit_synth_spec(emissionlines, syntheticspec)       type=arrays of structures. This function returns the spectrum                                in the arrays of structures                                {wavelength: 0.0, flux:0.0, residual:0.0}   ");
  
  

libdata[libdataItem++] = new Array("./minloc_idl.html", "minloc_idl.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "minloc_idl.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./minloc_idl.html#minloc_idl", "minloc_idl", 'routine in <a href="./minloc_idl.html">minloc_idl.pro</a>', "minloc_idl.pro", "", "minloc_idl", "     This function determines the location of the element      in the array with the minimum value   ", "firstlastinarr                   an array of type INTEGER or REAL.  ", "          -1", "    For example: <span class= code-prompt >IDL&gt;</span> chi_squared = [5, 7, 1, 3, 6, 1] <span class= code-prompt >IDL&gt;</span>  chi_squared_min_loc=minloc_idl(chi_squared,first=1) <span class= code-prompt >IDL&gt;</span> print, chi_squared_min_loc       type=integer.            Location of the minimum value within an array:            the location of the first value if first=1,            the location of last value if last=1.   ");
  
  

libdata[libdataItem++] = new Array("./mpfit_whitenoise.html", "mpfit_whitenoise.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "mpfit_whitenoise.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./mpfit_whitenoise.html#mpfit_whitenoise", "mpfit_whitenoise", 'routine in <a href="./mpfit_whitenoise.html">mpfit_whitenoise.pro</a>', "mpfit_whitenoise.pro", "   Ashkbiz Danehkar   ", "mpfit_whitenoise", "     This function extracts the white noise from the spectrum.   ", "spectrumdata                       the input spectrum stored in                        the arrays of structures                        { wavelength: 0.0, flux:0.0, residual:0.0}   ", "Spectrum Noise Uncertainty", "   0.1.0        20/07/2014, A. Danehkar, Translated to IDL from FORTRAN                  in ALFA by R. Wessson       21/11/2017, A. Danehkar, Some modifications.     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> specdata=mpfit_whitenoise(specdata)       type=arrays of structures. This function returns the white noise                                in the arrays of structures                                {wavelength: 0.0, flux:0.0, residual:0.0}   ");
  
  

libdata[libdataItem++] = new Array("./nint_idl.html", "nint_idl.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "nint_idl.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./nint_idl.html#nint_idl", "nint_idl", 'routine in <a href="./nint_idl.html">nint_idl.pro</a>', "nint_idl.pro", "", "nint_idl", " NAME:  NINT  PURPOSE:  Nearest integer function.  EXPLANATION:  NINT() is similar to the intrinsic ROUND function, with the following  two differences:  (1) if no absolute value exceeds 32767, then the array is returned as    as a type INTEGER instead of LONG  (2) NINT will work on strings, e.g. print,nint(['3.4','-0.9']) will    give [3,-1], whereas ROUND() gives an error message   CALLING SEQUENCE:  result = nint( x, [ /LONG] )   INPUT:  X - An IDL variable, scalar or vector, usually floating or double    Unless the LONG keyword is set, X must be between -32767.5 and    32767.5 to avoid integer overflow   OUTPUT  RESULT - Nearest integer to X   OPTIONAL KEYWORD INPUT:  LONG - If this keyword is set and non-zero, then the result of NINT    is of type LONG.   Otherwise, the result is of type LONG if    any absolute values exceed 32767, and type INTEGER if all    all absolute values are less than 32767.  EXAMPLE:  If X = [-0.9,-0.1,0.1,0.9] then NINT(X) = [-1,0,0,1]   PROCEDURE CALL:  None:  REVISION HISTORY:  Written W. Landsman        January 1989  Added LONG keyword         November 1991  Use ROUND if since V3.1.0  June 1993  Always start with ROUND function    April 1995  Return LONG values, if some input value exceed 32767    and accept string values   February 1998        Use size(/TNAME) instead of DATATYPE()      October 2001  ", "LONGx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./read_deeplines.html", "read_deeplines.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "read_deeplines.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./read_deeplines.html#read_deeplines", "read_deeplines", 'routine in <a href="./read_deeplines.html">read_deeplines.pro</a>', "read_deeplines.pro", "   Ashkbiz Danehkar   ", "read_deeplines", "     This function reads the list of deep lines      from the 3rd binary table extension      of the FITS data file (../data/linedata.fits).      This function uses the routine ftab_ext from      IDL Astronomy User's library.   ", "EXTEN_NOfits_file                       the FITS file name ( ../data/linedata.fits )   ", "Lines", "   0.1.0        20/07/2014, A. Danehkar, IDL code written.       16/06/2017, A. Danehkar, A few changes.     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> deepline_data = read_deeplines(fits_file) <span class= code-prompt >IDL&gt;</span> print, deepline_data.Wavelength, deepline_data.Ion       type=arrays of structures. This function returns the deep line list                                in the arrays of structures                                { Wavelength:0.0,                                  Ion:'',                                  Multiplet:'',                                  LowerTerm:'',                                  UpperTerm:'',                                  g1:'',                                  g2:''}   ");
  
  

libdata[libdataItem++] = new Array("./read_skylines.html", "read_skylines.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "read_skylines.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./read_skylines.html#read_skylines", "read_skylines", 'routine in <a href="./read_skylines.html">read_skylines.pro</a>', "read_skylines.pro", "   Ashkbiz Danehkar   ", "read_skylines", "     This function reads the list of sky lines      from the 3rd binary table extension      of the FITS data file (../data/linedata.fits).      This function uses the routine ftab_ext from      IDL Astronomy User's library.   ", "fits_file                       the FITS file name ( ../data/linedata.fits )   ", "Lines", "   0.1.0        20/07/2014, A. Danehkar, IDL code written.     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> skyline_data = read_skylines(fits_file) <span class= code-prompt >IDL&gt;</span> print, skyline_data.Wavelength       type=arrays of structures. This function returns the sky line list                                in the arrays of structures                                { Wavelength:0.0}   ");
  
  

libdata[libdataItem++] = new Array("./read_stronglines.html", "read_stronglines.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "read_stronglines.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./read_stronglines.html#read_stronglines", "read_stronglines", 'routine in <a href="./read_stronglines.html">read_stronglines.pro</a>', "read_stronglines.pro", "   Ashkbiz Danehkar   ", "read_stronglines", "     This function reads the list of strong lines      from the 1rd binary table extension      of the FITS data file (../data/linedata.fits).      This function uses the routine ftab_ext from      IDL Astronomy User's library.   ", "fits_file                       the FITS file name ( ../data/linedata.fits )   ", "Lines", "   0.1.0        20/07/2014, A. Danehkar, IDL code written.     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> strongline_data = read_stronglines(fits_file) <span class= code-prompt >IDL&gt;</span> print, strongline_data.Wavelength, strongline_data.Ion       type=arrays of structures. This function returns the strong line list                                in the arrays of structures                                { Wavelength:0.0,                                  Ion:'',                                  Multiplet:'',                                  LowerTerm:'',                                  UpperTerm:'',                                  g1:'',                                  g2:''}   ");
  
  

libdata[libdataItem++] = new Array("./read_ultradeeplines.html", "read_ultradeeplines.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "read_ultradeeplines.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./read_ultradeeplines.html#read_ultradeeplines", "read_ultradeeplines", 'routine in <a href="./read_ultradeeplines.html">read_ultradeeplines.pro</a>', "read_ultradeeplines.pro", "   Ashkbiz Danehkar   ", "read_ultradeeplines", "     This function reads the list of ultra deep lines      from the 4rd binary table extension      of the FITS data file (../data/linedata.fits).      This function uses the routine ftab_ext from      IDL Astronomy User's library.   ", "fits_file                       the FITS file name ( ../data/linedata.fits )   ", "Lines", "   0.1.0        20/07/2014, A. Danehkar, IDL code written.     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> ultradeepline_data = read_ultradeeplines(fits_file) <span class= code-prompt >IDL&gt;</span> print, ultradeepline_data.Wavelength, ultradeepline_data.Ion       type=arrays of structures. This function returns the ultra deep line list                                in the arrays of structures                                { Wavelength:0.0,                                  Ion:'',                                  Multiplet:'',                                  LowerTerm:'',                                  UpperTerm:'',                                  g1:'',                                  g2:''}   ");
  
  

